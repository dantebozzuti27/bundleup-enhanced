{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/dbozz/bundleup-enhanced/lib/spec-normalizer.js"],"sourcesContent":["import Anthropic from '@anthropic-ai/sdk';\n\nconst anthropic = new Anthropic({\n  apiKey: process.env.ANTHROPIC_API_KEY,\n});\n\nclass SpecNormalizer {\n  constructor() {\n    this.requestQueue = [];\n    this.processing = false;\n    this.requestsPerMinute = 45; // Stay safely under 50 limit\n    this.requestInterval = 60000 / this.requestsPerMinute; // ~1333ms between requests\n    this.lastRequestTime = 0;\n  }\n\n  async extractSpecs(productData) {\n    // Add to queue and process\n    return new Promise((resolve, reject) => {\n      this.requestQueue.push({ productData, resolve, reject });\n      this.processQueue();\n    });\n  }\n\n  async processQueue() {\n    if (this.processing || this.requestQueue.length === 0) return;\n    \n    this.processing = true;\n    \n    while (this.requestQueue.length > 0) {\n      const { productData, resolve, reject } = this.requestQueue.shift();\n      \n      try {\n        // Ensure minimum time between requests\n        const now = Date.now();\n        const timeSinceLastRequest = now - this.lastRequestTime;\n        if (timeSinceLastRequest < this.requestInterval) {\n          await new Promise(r => setTimeout(r, this.requestInterval - timeSinceLastRequest));\n        }\n        \n        const message = await anthropic.messages.create({\n          model: 'claude-sonnet-4-5-20250929',\n          max_tokens: 1000,\n          messages: [{\n            role: 'user',\n            content: `Extract and normalize the following product specifications into a structured format. \n            \nProduct data: ${JSON.stringify(productData)}\n\nReturn the specifications in this JSON format:\n{\n  \"specs\": {\n    \"key\": \"value\"\n  }\n}`\n          }]\n        });\n        \n        this.lastRequestTime = Date.now();\n        \n        // Parse the response\n        const content = message.content[0].text;\n        let parsed;\n        try {\n          parsed = JSON.parse(content);\n        } catch (e) {\n          // If not valid JSON, wrap it\n          parsed = { specs: { raw: content } };\n        }\n        \n        resolve(parsed);\n        \n      } catch (error) {\n        if (error.status === 429) {\n          console.log('Rate limited, waiting 10 seconds before retry...');\n          // Re-queue this item\n          this.requestQueue.unshift({ productData, resolve, reject });\n          // Wait before continuing\n          await new Promise(r => setTimeout(r, 10000));\n        } else {\n          console.error('Error extracting specs:', error.message);\n          reject(error);\n        }\n      }\n    }\n    \n    this.processing = false;\n  }\n\n  async normalizeSpecs(product) {\n    try {\n      const specs = await this.extractSpecs(product);\n      return {\n        ...product,\n        normalizedSpecs: specs\n      };\n    } catch (error) {\n      console.error('Error normalizing specs for product:', product.id || 'unknown', error.message);\n      return {\n        ...product,\n        normalizedSpecs: null,\n        error: error.message\n      };\n    }\n  }\n\n  async normalizeBatch(products, batchSize = 5) {\n    const results = [];\n    \n    if (!products || products.length === 0) {\n      return results;\n    }\n    \n    console.log(`Processing ${products.length} products in batches of ${batchSize}`);\n    \n    for (let i = 0; i < products.length; i += batchSize) {\n      const batch = products.slice(i, i + batchSize);\n      const batchNum = Math.floor(i / batchSize) + 1;\n      const totalBatches = Math.ceil(products.length / batchSize);\n      \n      console.log(`Processing batch ${batchNum}/${totalBatches}...`);\n      \n      const batchResults = await Promise.all(\n        batch.map(product => this.normalizeSpecs(product))\n      );\n      \n      results.push(...batchResults);\n      \n      console.log(`Completed batch ${batchNum}/${totalBatches}`);\n      \n      // Small pause between batches\n      if (i + batchSize < products.length) {\n        await new Promise(r => setTimeout(r, 1000));\n      }\n    }\n    \n    console.log(`Completed processing all ${products.length} products`);\n    return results;\n  }\n}\n\nexport default SpecNormalizer;"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,YAAY,IAAI,+KAAS,CAAC;IAC9B,QAAQ,QAAQ,GAAG,CAAC,iBAAiB;AACvC;AAEA,MAAM;IACJ,aAAc;QACZ,IAAI,CAAC,YAAY,GAAG,EAAE;QACtB,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,iBAAiB,GAAG,IAAI,6BAA6B;QAC1D,IAAI,CAAC,eAAe,GAAG,QAAQ,IAAI,CAAC,iBAAiB,EAAE,2BAA2B;QAClF,IAAI,CAAC,eAAe,GAAG;IACzB;IAEA,MAAM,aAAa,WAAW,EAAE;QAC9B,2BAA2B;QAC3B,OAAO,IAAI,QAAQ,CAAC,SAAS;YAC3B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;gBAAE;gBAAa;gBAAS;YAAO;YACtD,IAAI,CAAC,YAAY;QACnB;IACF;IAEA,MAAM,eAAe;QACnB,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,KAAK,GAAG;QAEvD,IAAI,CAAC,UAAU,GAAG;QAElB,MAAO,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,EAAG;YACnC,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK;YAEhE,IAAI;gBACF,uCAAuC;gBACvC,MAAM,MAAM,KAAK,GAAG;gBACpB,MAAM,uBAAuB,MAAM,IAAI,CAAC,eAAe;gBACvD,IAAI,uBAAuB,IAAI,CAAC,eAAe,EAAE;oBAC/C,MAAM,IAAI,QAAQ,CAAA,IAAK,WAAW,GAAG,IAAI,CAAC,eAAe,GAAG;gBAC9D;gBAEA,MAAM,UAAU,MAAM,UAAU,QAAQ,CAAC,MAAM,CAAC;oBAC9C,OAAO;oBACP,YAAY;oBACZ,UAAU;wBAAC;4BACT,MAAM;4BACN,SAAS,CAAC;;cAER,EAAE,KAAK,SAAS,CAAC,aAAa;;;;;;;CAO3C,CAAC;wBACQ;qBAAE;gBACJ;gBAEA,IAAI,CAAC,eAAe,GAAG,KAAK,GAAG;gBAE/B,qBAAqB;gBACrB,MAAM,UAAU,QAAQ,OAAO,CAAC,EAAE,CAAC,IAAI;gBACvC,IAAI;gBACJ,IAAI;oBACF,SAAS,KAAK,KAAK,CAAC;gBACtB,EAAE,OAAO,GAAG;oBACV,6BAA6B;oBAC7B,SAAS;wBAAE,OAAO;4BAAE,KAAK;wBAAQ;oBAAE;gBACrC;gBAEA,QAAQ;YAEV,EAAE,OAAO,OAAO;gBACd,IAAI,MAAM,MAAM,KAAK,KAAK;oBACxB,QAAQ,GAAG,CAAC;oBACZ,qBAAqB;oBACrB,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;wBAAE;wBAAa;wBAAS;oBAAO;oBACzD,yBAAyB;oBACzB,MAAM,IAAI,QAAQ,CAAA,IAAK,WAAW,GAAG;gBACvC,OAAO;oBACL,QAAQ,KAAK,CAAC,2BAA2B,MAAM,OAAO;oBACtD,OAAO;gBACT;YACF;QACF;QAEA,IAAI,CAAC,UAAU,GAAG;IACpB;IAEA,MAAM,eAAe,OAAO,EAAE;QAC5B,IAAI;YACF,MAAM,QAAQ,MAAM,IAAI,CAAC,YAAY,CAAC;YACtC,OAAO;gBACL,GAAG,OAAO;gBACV,iBAAiB;YACnB;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,wCAAwC,QAAQ,EAAE,IAAI,WAAW,MAAM,OAAO;YAC5F,OAAO;gBACL,GAAG,OAAO;gBACV,iBAAiB;gBACjB,OAAO,MAAM,OAAO;YACtB;QACF;IACF;IAEA,MAAM,eAAe,QAAQ,EAAE,YAAY,CAAC,EAAE;QAC5C,MAAM,UAAU,EAAE;QAElB,IAAI,CAAC,YAAY,SAAS,MAAM,KAAK,GAAG;YACtC,OAAO;QACT;QAEA,QAAQ,GAAG,CAAC,CAAC,WAAW,EAAE,SAAS,MAAM,CAAC,wBAAwB,EAAE,WAAW;QAE/E,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,MAAM,EAAE,KAAK,UAAW;YACnD,MAAM,QAAQ,SAAS,KAAK,CAAC,GAAG,IAAI;YACpC,MAAM,WAAW,KAAK,KAAK,CAAC,IAAI,aAAa;YAC7C,MAAM,eAAe,KAAK,IAAI,CAAC,SAAS,MAAM,GAAG;YAEjD,QAAQ,GAAG,CAAC,CAAC,iBAAiB,EAAE,SAAS,CAAC,EAAE,aAAa,GAAG,CAAC;YAE7D,MAAM,eAAe,MAAM,QAAQ,GAAG,CACpC,MAAM,GAAG,CAAC,CAAA,UAAW,IAAI,CAAC,cAAc,CAAC;YAG3C,QAAQ,IAAI,IAAI;YAEhB,QAAQ,GAAG,CAAC,CAAC,gBAAgB,EAAE,SAAS,CAAC,EAAE,cAAc;YAEzD,8BAA8B;YAC9B,IAAI,IAAI,YAAY,SAAS,MAAM,EAAE;gBACnC,MAAM,IAAI,QAAQ,CAAA,IAAK,WAAW,GAAG;YACvC;QACF;QAEA,QAAQ,GAAG,CAAC,CAAC,yBAAyB,EAAE,SAAS,MAAM,CAAC,SAAS,CAAC;QAClE,OAAO;IACT;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 243, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/dbozz/bundleup-enhanced/lib/catalog-adapter.js"],"sourcesContent":["import SpecNormalizer from './spec-normalizer.js';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL,\n  process.env.SUPABASE_SERVICE_ROLE_KEY\n);\n\nclass CatalogAdapter {\n  constructor() {\n    this.specNormalizer = new SpecNormalizer();\n    this.cache = new Map();\n    this.cacheExpiry = 60 * 60 * 1000; // 1 hour\n  }\n\n  async searchProducts(queries) {\n    if (!queries || queries.length === 0) {\n      return [];\n    }\n\n    try {\n      const results = [];\n      \n      // Process queries sequentially to avoid rate limits\n      for (let i = 0; i < queries.length; i++) {\n        const query = queries[i];\n        console.log(`Searching for query ${i + 1}/${queries.length}: ${query}`);\n        \n        try {\n          const result = await this.searchItem(query);\n          results.push(...result);\n        } catch (error) {\n          console.error(`Error searching for \"${query}\":`, error.message);\n          // Continue with next query even if this one fails\n        }\n        \n        // Small delay between searches\n        if (i < queries.length - 1) {\n          await new Promise(r => setTimeout(r, 500));\n        }\n      }\n      \n      return results;\n      \n    } catch (error) {\n      console.error('Error in searchProducts:', error);\n      throw error;\n    }\n  }\n\n  async searchItem(query) {\n    try {\n      // First, try to get category specs\n      let categorySpecs = null;\n      try {\n        const { data, error } = await supabase\n          .from('category_specs')\n          .select('*')\n          .eq('category', query)\n          .single();\n        \n        if (!error && data) {\n          categorySpecs = data;\n        }\n      } catch (error) {\n        console.log('Error fetching category specs:', error.message);\n      }\n\n      // Search for products (mock implementation - replace with your actual search)\n      // This would typically call an external API or database\n      const mockProducts = await this.fetchProductsFromSource(query);\n      \n      if (!mockProducts || mockProducts.length === 0) {\n        console.log(`No products found for query: ${query}`);\n        return [];\n      }\n\n      console.log(`Found ${mockProducts.length} products for query: ${query}`);\n      \n      // Normalize specs using Claude API (with rate limiting)\n      const normalizedProducts = await this.specNormalizer.normalizeBatch(mockProducts, 5);\n      \n      // Cache the results\n      await this.cacheProducts(normalizedProducts);\n      \n      return normalizedProducts;\n      \n    } catch (error) {\n      console.error('Error in searchItem:', error);\n      throw error;\n    }\n  }\n\n  async fetchProductsFromSource(query) {\n    // TODO: Replace this with your actual product source\n    // This is a placeholder that returns mock data\n    \n    // Example: If you're using an external API\n    // const response = await fetch(`https://api.example.com/search?q=${query}`);\n    // return await response.json();\n    \n    // For now, returning empty array to prevent errors\n    console.log(`Mock search for: ${query}`);\n    return [];\n  }\n\n  async cacheProducts(products) {\n    for (const product of products) {\n      try {\n        // Prepare product data for database\n        const productData = {\n          id: product.id || `product_${Date.now()}_${Math.random()}`,\n          title: this.truncate(product.title, 500),\n          description: this.truncate(product.description, 1000),\n          price: product.price,\n          currency: product.currency || 'USD',\n          image_url: this.truncate(product.image_url, 1000),\n          product_url: this.truncate(product.product_url, 1000),\n          specs: product.normalizedSpecs || {},\n          source: product.source || 'unknown',\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        };\n\n        const { error } = await supabase\n          .from('products')\n          .upsert(productData, { onConflict: 'id' });\n\n        if (error) {\n          console.error('Error caching product:', error);\n        }\n      } catch (error) {\n        console.error('Error caching product:', error.message);\n      }\n    }\n  }\n\n  truncate(str, maxLength) {\n    if (!str) return '';\n    return str.length > maxLength ? str.substring(0, maxLength) : str;\n  }\n\n  async searchWithCache(searchParams) {\n    const { queries } = searchParams;\n    \n    if (!queries || queries.length === 0) {\n      return [];\n    }\n\n    const cacheKey = JSON.stringify(queries);\n    \n    // Check cache first\n    if (this.cache.has(cacheKey)) {\n      const cached = this.cache.get(cacheKey);\n      if (Date.now() - cached.timestamp < this.cacheExpiry) {\n        console.log('Returning cached results');\n        return cached.data;\n      }\n    }\n\n    // If not in cache or expired, search\n    console.log('Cache miss, performing search...');\n    const results = await this.searchProducts(queries);\n    \n    // Update cache\n    this.cache.set(cacheKey, {\n      data: results,\n      timestamp: Date.now()\n    });\n\n    return results;\n  }\n}\n\nexport default CatalogAdapter;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 388, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/dbozz/bundleup-enhanced/app/api/search-and-optimize/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport CatalogAdapter from '@/lib/catalog-adapter';\n\nexport async function POST(request) {\n  try {\n    const body = await request.json();\n    \n    // Validate request\n    if (!body.queries || !Array.isArray(body.queries)) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: 'Invalid request: queries array is required'\n        },\n        { status: 400 }\n      );\n    }\n    \n    console.log(`Starting search for ${body.queries.length} queries with rate limiting...`);\n    console.log('Queries:', body.queries);\n    \n    const catalogAdapter = new CatalogAdapter();\n    const results = await catalogAdapter.searchWithCache(body);\n    \n    console.log(`Search completed. Found ${results.length} total results`);\n    \n    return NextResponse.json({\n      success: true,\n      data: results,\n      count: results.length\n    });\n  } catch (error) {\n    console.error('Search API error:', error);\n    \n    // Handle rate limiting errors\n    if (error.status === 429) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: 'Rate limit exceeded. Please try again in a minute.',\n          retryAfter: 60\n        },\n        { status: 429 }\n      );\n    }\n    \n    // Handle other errors\n    return NextResponse.json(\n      {\n        success: false,\n        error: error.message || 'Search failed',\n        details: process.env.NODE_ENV === 'development' ? error.stack : undefined\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET(request) {\n  return NextResponse.json(\n    {\n      message: 'Search API is running. Use POST method to search.',\n      usage: {\n        method: 'POST',\n        body: {\n          queries: ['search query 1', 'search query 2']\n        }\n      }\n    },\n    { status: 200 }\n  );\n}"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,mBAAmB;QACnB,IAAI,CAAC,KAAK,OAAO,IAAI,CAAC,MAAM,OAAO,CAAC,KAAK,OAAO,GAAG;YACjD,OAAO,gJAAY,CAAC,IAAI,CACtB;gBACE,SAAS;gBACT,OAAO;YACT,GACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,QAAQ,GAAG,CAAC,CAAC,oBAAoB,EAAE,KAAK,OAAO,CAAC,MAAM,CAAC,8BAA8B,CAAC;QACtF,QAAQ,GAAG,CAAC,YAAY,KAAK,OAAO;QAEpC,MAAM,iBAAiB,IAAI,sIAAc;QACzC,MAAM,UAAU,MAAM,eAAe,eAAe,CAAC;QAErD,QAAQ,GAAG,CAAC,CAAC,wBAAwB,EAAE,QAAQ,MAAM,CAAC,cAAc,CAAC;QAErE,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;YACN,OAAO,QAAQ,MAAM;QACvB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qBAAqB;QAEnC,8BAA8B;QAC9B,IAAI,MAAM,MAAM,KAAK,KAAK;YACxB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBACE,SAAS;gBACT,OAAO;gBACP,YAAY;YACd,GACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,sBAAsB;QACtB,OAAO,gJAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO,MAAM,OAAO,IAAI;YACxB,SAAS,uCAAyC,MAAM,KAAK,GAAG;QAClE,GACA;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,IAAI,OAAO;IAC/B,OAAO,gJAAY,CAAC,IAAI,CACtB;QACE,SAAS;QACT,OAAO;YACL,QAAQ;YACR,MAAM;gBACJ,SAAS;oBAAC;oBAAkB;iBAAiB;YAC/C;QACF;IACF,GACA;QAAE,QAAQ;IAAI;AAElB","debugId":null}}]
}